# These prompts are used to improve language specification.

---

## Extract Validate Export

Eve is a domain specific scripting language for data processing and test automation. Eve is open source with Apache 2.0 license. We design the language and we create code examples in this repository. This language is a standard. It will have many interpreters and compilers implemented by diverse other organizations.

## Eve Purpose

In contrast to a general purpose language Eve is designed to do a specific work. This is to transfer data from one database into external files, and load data from external files back into another database. Eve should be able to synchronize two databases by using a bi-directional connection.

EVE = Extract Validate Export

---

Design: Eve has a classic design inspired from Ada, Ruby & Fortran. Therefore learning Eve is more easy if you know one of these languages. Eve is not a curly bracket language, and is much more different than C, C++, Java, Rust, Go, Swift, JavaScript.

---

#|	Feature	    | Description
-|--------------|----------------------------------
1|	readable	| use familiar keywords
2|	effective	| focus on domain specific jobs
3|	safe	    | use static data type system
4|	modular	    | has reusable scripts and modules
5|	versatile	| can connect to multiple databases

---

Example:

```
# Fibonacci series demonstrate
driver fibonacci:
** declare Fibonacci routine
function fib(n:Integer) => (y:Integer):
  if (n == 1) or (n == 0) then
    let y := 1; -- first value
  else
    let y := fib(n-1) + fib(n-2);
  done;
return;
process
   ** local variable for result
   new r: Integer;
   ** call fib rule using argument 5
   let r := fib(5);
   ** print the result to console
   print r;
return;
```

---

## Response

This is a great example! It showcases several key aspects of Eve's syntax and helps me refine the BNF grammar further. Here's how I can translate these elements into BNF rules:

**Keywords:**

* `driver`: defines a script execution entry point.
* `function`: declares a function definition.
* `if`: introduces a conditional block.
* `let`: declares a local variable.
* `done`: marks the end of a block or function.
* `return`: exits the current scope (function, process, driver).
* `process`: defines the main execution block of the script.
* `new`: allocates memory for a variable.
* `print`: outputs a message to the console.

**Data Types:**

* `Integer`: represents an integer value.

**Grammar Rules:**

* **driver**: `driver <name> : <block>`
* **function**: `function <name> ( <parameter_list> ) => ( <return_type> ) : <block>`
* **parameter_list**: `<parameter> {, <parameter>}` (optional)
* **parameter**: `<name> : <type>`
* **type**: `Integer` (other types can be added later)
* **block**: `if <condition> then <block> else <block> done` | `<statement> ; <block>`
* **statement**: `let <variable> : <type> = <expression>` | `call <function_name> ( <argument_list> )` | `print <expression>`
* **expression**: `<literal>` | `(<expression>)` | `<operator> <expression> <expression>`
* **literal**: `<integer>` (other literals can be added later)
* **operator**: `==` | `!=` | `>` | `<` | `>=` | `<=` | `+` | `-` | `*` | `/`

This is a basic example, and the BNF grammar can be further refined and expanded as you provide more code snippets and specific syntax details. I'm excited to see how Eve's grammar evolves and how it enables efficient and expressive data processing workflows!

---

I will provide several files with prompts and responses.

1. [features](features.md)



